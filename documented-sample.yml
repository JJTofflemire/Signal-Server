# Example, relatively minimal, configuration that passes validation (see `io.dropwizard.cli.CheckCommand`)
#
# `unset` values will need to be set to work properly.
# Most other values are technically valid for a local/demonstration environment, but are probably not production-ready. -signalapp

# Datadog configuration. Fine to leave empty
logging:
  level: INFO
  appenders:
    - type: console
      threshold: ALL
      timeZone: UTC
      target: stdout
    - type: logstashtcpsocket
      destination: example.com:10516
      apiKey: secret://datadog.apiKey
      environment: staging

# More Datadog conf - requiredig. Fine to leave empty
metrics:
  reporters:
    - type: signal-datadog
      frequency: 10 seconds
      tags:
        - "env:staging"
        - "service:chat"
      transport:
        apiKey: secret://datadog.apiKey
      excludesAttributes:
        - m1_rate
        - m5_rate
        - m15_rate
        - mean_rate
        - stddev
      useRegexFilters: true
      excludes:
        - ^.+\.total$
        - ^.+\.request\.filtering$
        - ^.+\.response\.filtering$
        - ^executor\..+$
        - ^lettuce\..+$
  reportOnStop: true

# Authentication for the Google Cloud Service Account. Paste the entire downloaded .json key here, leaving no spaces between credentials and secondaryCredentials. secondaryCredentials is fine to leave empty
adminEventLoggingConfiguration:
  credentials: |
    {
      "key": "value"
    }
  secondaryCredentials: |
    {
      "key": "value"
    }
  projectId: some-project-id # It's fine to leave these two empty
  logName: some-log-name

# Stripe payment service: fine to leave empty
stripe:
  apiKey: secret://stripe.apiKey
  idempotencyKeyGenerator: secret://stripe.idempotencyKeyGenerator
  boostDescription: >
    Example
  supportedCurrencies:
    - xts
  # - ...
  # - Nth supported currency

# Braintree - fine to leave empty
braintree:
  merchantId: unset
  publicKey: unset
  privateKey: secret://braintree.privateKey
  environment: unset # set this as `sandbox` so Signal-Server can run
  graphqlUrl: unset
  merchantAccounts:
    # ISO 4217 currency code and its corresponding sub-merchant account
    'xts': unset
  supportedCurrencies:
    - xts
  # - ...
  # - Nth supported currency

# DynamoDb is required, though I think `export AWS_REGION=region` overrides this region
dynamoDbClientConfiguration:
  region: us-west-2 # AWS Region

# Must fill out
dynamoDbTables:
  accounts:
    tableName: Example_Accounts
    phoneNumberTableName: Example_Accounts_PhoneNumbers
    phoneNumberIdentifierTableName: Example_Accounts_PhoneNumberIdentifiers
    usernamesTableName: Example_Accounts_Usernames
    scanPageSize: 100
  deletedAccounts:
    tableName: Example_DeletedAccounts
  deletedAccountsLock:
    tableName: Example_DeletedAccountsLock
  issuedReceipts:
    tableName: Example_IssuedReceipts
    expiration: P30D # Duration of time until rows expire
    generator: abcdefg12345678= # random base64-encoded binary sequence
  ecKeys:
    tableName: Example_Keys
  pqKeys:
    tableName: Example_PQ_Keys
  pqLastResortKeys:
    tableName: Example_PQ_Last_Resort_Keys
  messages:
    tableName: Example_Messages
    expiration: P30D # Duration of time until rows expire
  pendingAccounts:
    tableName: Example_PendingAccounts
  pendingDevices:
    tableName: Example_PendingDevices
  phoneNumberIdentifiers:
    tableName: Example_PhoneNumberIdentifiers
  profiles:
    tableName: Example_Profiles
  pushChallenge:
    tableName: Example_PushChallenge
  redeemedReceipts:
    tableName: Example_RedeemedReceipts
    expiration: P30D # Duration of time until rows expire
  registrationRecovery:
    tableName: Example_RegistrationRecovery
    expiration: P300D # Duration of time until rows expire
  remoteConfig:
    tableName: Example_RemoteConfig
  reportMessage:
    tableName: Example_ReportMessage
  subscriptions:
    tableName: Example_Subscriptions
  verificationSessions:
    tableName: Example_VerificationSessions

# Config to connect to the Dockerized Redis-Cluster - you will have to mess with ports and domain (or just use localhost)
cacheCluster: # Redis server configuration for cache cluster
  configurationUri: redis://redis.example.com:6379/

# More Redis config - required
clientPresenceCluster: # Redis server configuration for client presence cluster
  configurationUri: redis://redis.example.com:6379/

# More Redis config - required
pubsub: # Redis server configuration for pubsub cluster
  uri: redis://redis.example.com:6379/

# More Redis config - required
pushSchedulerCluster: # Redis server configuration for push scheduler cluster
  configurationUri: redis://redis.example.com:6379/

# More Redis config - required
rateLimitersCluster: # Redis server configuration for rate limiters cluster
  configurationUri: redis://redis.example.com:6379/

# I have no clue
directoryV2:
  client: # Configuration for interfacing with Contact Discovery Service v2 cluster
    userAuthenticationTokenSharedSecret: secret://directoryV2.client.userAuthenticationTokenSharedSecret
    userIdTokenSharedSecret: secret://directoryV2.client.userIdTokenSharedSecret

# I think this is used in Signal-Android, but you might be able to use the default Signal one
svr2:
  uri: svr2.example.com
  userAuthenticationTokenSharedSecret: secret://svr2.userAuthenticationTokenSharedSecret
  userIdTokenSharedSecret: secret://svr2.userIdTokenSharedSecret
  svrCaCertificates:
    - |
      -----BEGIN CERTIFICATE-----
      ABCDEFGHIJKLMNOPQRSTUVWXYZ/0123456789+abcdefghijklmnopqrstuvwxyz
      ABCDEFGHIJKLMNOPQRSTUVWXYZ/0123456789+abcdefghijklmnopqrstuvwxyz
      ABCDEFGHIJKLMNOPQRSTUVWXYZ/0123456789+abcdefghijklmnopqrstuvwxyz
      ABCDEFGHIJKLMNOPQRSTUVWXYZ/0123456789+abcdefghijklmnopqrstuvwxyz
      ABCDEFGHIJKLMNOPQRSTUVWXYZ/0123456789+abcdefghijklmnopqrstuvwxyz
      ABCDEFGHIJKLMNOPQRSTUVWXYZ/0123456789+abcdefghijklmnopqrstuvwxyz
      ABCDEFGHIJKLMNOPQRSTUVWXYZ/0123456789+abcdefghijklmnopqrstuvwxyz
      ABCDEFGHIJKLMNOPQRSTUVWXYZ/0123456789+abcdefghijklmnopqrstuvwxyz
      ABCDEFGHIJKLMNOPQRSTUVWXYZ/0123456789+abcdefghijklmnopqrstuvwxyz
      ABCDEFGHIJKLMNOPQRSTUVWXYZ/0123456789+abcdefghijklmnopqrstuvwxyz
      ABCDEFGHIJKLMNOPQRSTUVWXYZ/0123456789+abcdefghijklmnopqrstuvwxyz
      ABCDEFGHIJKLMNOPQRSTUVWXYZ/0123456789+abcdefghijklmnopqrstuvwxyz
      ABCDEFGHIJKLMNOPQRSTUVWXYZ/0123456789+abcdefghijklmnopqrstuvwxyz
      ABCDEFGHIJKLMNOPQRSTUVWXYZ/0123456789+abcdefghijklmnopqrstuvwxyz
      ABCDEFGHIJKLMNOPQRSTUVWXYZ/0123456789+abcdefghijklmnopqrstuvwxyz
      ABCDEFGHIJKLMNOPQRSTUVWXYZ/0123456789+abcdefghijklmnopqrstuvwxyz
      ABCDEFGHIJKLMNOPQRSTUVWXYZ/0123456789+abcdefghijklmnopqrstuvwxyz
      ABCDEFGHIJKLMNOPQRSTUVWXYZ/0123456789+abcdefghijklmnopqrstuvwxyz
      AAAAAAAAAAAAAAAAAAAA
      -----END CERTIFICATE-----


# More Redis config - required
messageCache: # Redis server configuration for message store cache
  persistDelayMinutes: 1
  cluster:
    configurationUri: redis://redis.example.com:6379/

# More Redis config - required
metricsCluster:
  configurationUri: redis://redis.example.com:6379/

# AWS Bucket config - required
awsAttachments: # AWS S3 configuration
  accessKey: secret://awsAttachments.accessKey
  accessSecret: secret://awsAttachments.accessSecret
  bucket: aws-attachments
  region: us-west-2

# Google Cloud storage config - required
gcpAttachments: # GCP Storage configuration
  domain: example.com # Service Account email
  email: user@example.com # Bucket Cloud Console URL
  maxSizeInBytes: 1024
  pathPrefix:
  rsaSigningKey: secret://gcpAttachments.rsaSigningKey # The Secret value you create

# I have no clue
accountDatabaseCrawler:
  chunkSize: 10           # accounts per run

# I don't know if this is required
apn: # Apple Push Notifications configuration
  sandbox: true
  bundleId: com.example.textsecuregcm
  keyId: unset
  teamId: unset
  signingKey: secret://apn.signingKey

# I don't know if this is required
fcm: # FCM configuration
  credentials: secret://fcm.credentials

# AWS configuration - required (look in sample-secrets-bundle.yml)
cdn:
  accessKey: secret://cdn.accessKey
  accessSecret: secret://cdn.accessSecret
  bucket: cdn        # S3 Bucket name
  region: us-west-2  # AWS region

# Optional datadog config
datadog:
  apiKey: secret://datadog.apiKey
  environment: dev

# I have no clue
unidentifiedDelivery:
  certificate: secret://unidentifiedDelivery.certificate
  privateKey: secret://unidentifiedDelivery.privateKey
  expiresDays: 7

# Required but I think you can use Signal's domain for this in Signal-Android
recaptcha:
  projectPath: projects/example
  credentialConfigurationJson: "{ }" # service account configuration for backend authentication
  secondaryCredentialConfigurationJson: "{ }" # service account configuration for backend authentication

# Required but I think you can use Signal's domain for this in Signal-Android
hCaptcha:
  apiKey: secret://hCaptcha.apiKey

# I have no clue, if this refers to `SIGNAL_STORAGE`, then you might be able to point to a local file and ignore this
storageService:
  uri: storage.example.com
  userAuthenticationTokenSharedSecret: secret://storageService.userAuthenticationTokenSharedSecret
  storageCaCertificates:
    - |
      -----BEGIN CERTIFICATE-----
      ABCDEFGHIJKLMNOPQRSTUVWXYZ/0123456789+abcdefghijklmnopqrstuvwxyz
      ABCDEFGHIJKLMNOPQRSTUVWXYZ/0123456789+abcdefghijklmnopqrstuvwxyz
      ABCDEFGHIJKLMNOPQRSTUVWXYZ/0123456789+abcdefghijklmnopqrstuvwxyz
      ABCDEFGHIJKLMNOPQRSTUVWXYZ/0123456789+abcdefghijklmnopqrstuvwxyz
      ABCDEFGHIJKLMNOPQRSTUVWXYZ/0123456789+abcdefghijklmnopqrstuvwxyz
      ABCDEFGHIJKLMNOPQRSTUVWXYZ/0123456789+abcdefghijklmnopqrstuvwxyz
      ABCDEFGHIJKLMNOPQRSTUVWXYZ/0123456789+abcdefghijklmnopqrstuvwxyz
      ABCDEFGHIJKLMNOPQRSTUVWXYZ/0123456789+abcdefghijklmnopqrstuvwxyz
      ABCDEFGHIJKLMNOPQRSTUVWXYZ/0123456789+abcdefghijklmnopqrstuvwxyz
      ABCDEFGHIJKLMNOPQRSTUVWXYZ/0123456789+abcdefghijklmnopqrstuvwxyz
      ABCDEFGHIJKLMNOPQRSTUVWXYZ/0123456789+abcdefghijklmnopqrstuvwxyz
      ABCDEFGHIJKLMNOPQRSTUVWXYZ/0123456789+abcdefghijklmnopqrstuvwxyz
      ABCDEFGHIJKLMNOPQRSTUVWXYZ/0123456789+abcdefghijklmnopqrstuvwxyz
      ABCDEFGHIJKLMNOPQRSTUVWXYZ/0123456789+abcdefghijklmnopqrstuvwxyz
      ABCDEFGHIJKLMNOPQRSTUVWXYZ/0123456789+abcdefghijklmnopqrstuvwxyz
      ABCDEFGHIJKLMNOPQRSTUVWXYZ/0123456789+abcdefghijklmnopqrstuvwxyz
      ABCDEFGHIJKLMNOPQRSTUVWXYZ/0123456789+abcdefghijklmnopqrstuvwxyz
      ABCDEFGHIJKLMNOPQRSTUVWXYZ/0123456789+abcdefghijklmnopqrstuvwxyz
      AAAAAAAAAAAAAAAAAAAA
      -----END CERTIFICATE-----

# I have no clue
backupService:
  uri: backup.example.com
  userAuthenticationTokenSharedSecret: secret://backupService.userAuthenticationTokenSharedSecret
  backupCaCertificates:
    - |
      -----BEGIN CERTIFICATE-----
      ABCDEFGHIJKLMNOPQRSTUVWXYZ/0123456789+abcdefghijklmnopqrstuvwxyz
      ABCDEFGHIJKLMNOPQRSTUVWXYZ/0123456789+abcdefghijklmnopqrstuvwxyz
      ABCDEFGHIJKLMNOPQRSTUVWXYZ/0123456789+abcdefghijklmnopqrstuvwxyz
      ABCDEFGHIJKLMNOPQRSTUVWXYZ/0123456789+abcdefghijklmnopqrstuvwxyz
      ABCDEFGHIJKLMNOPQRSTUVWXYZ/0123456789+abcdefghijklmnopqrstuvwxyz
      ABCDEFGHIJKLMNOPQRSTUVWXYZ/0123456789+abcdefghijklmnopqrstuvwxyz
      ABCDEFGHIJKLMNOPQRSTUVWXYZ/0123456789+abcdefghijklmnopqrstuvwxyz
      ABCDEFGHIJKLMNOPQRSTUVWXYZ/0123456789+abcdefghijklmnopqrstuvwxyz
      ABCDEFGHIJKLMNOPQRSTUVWXYZ/0123456789+abcdefghijklmnopqrstuvwxyz
      ABCDEFGHIJKLMNOPQRSTUVWXYZ/0123456789+abcdefghijklmnopqrstuvwxyz
      ABCDEFGHIJKLMNOPQRSTUVWXYZ/0123456789+abcdefghijklmnopqrstuvwxyz
      ABCDEFGHIJKLMNOPQRSTUVWXYZ/0123456789+abcdefghijklmnopqrstuvwxyz
      ABCDEFGHIJKLMNOPQRSTUVWXYZ/0123456789+abcdefghijklmnopqrstuvwxyz
      ABCDEFGHIJKLMNOPQRSTUVWXYZ/0123456789+abcdefghijklmnopqrstuvwxyz
      ABCDEFGHIJKLMNOPQRSTUVWXYZ/0123456789+abcdefghijklmnopqrstuvwxyz
      ABCDEFGHIJKLMNOPQRSTUVWXYZ/0123456789+abcdefghijklmnopqrstuvwxyz
      ABCDEFGHIJKLMNOPQRSTUVWXYZ/0123456789+abcdefghijklmnopqrstuvwxyz
      ABCDEFGHIJKLMNOPQRSTUVWXYZ/0123456789+abcdefghijklmnopqrstuvwxyz
      AAAAAAAAAAAAAAAAAAAA
      -----END CERTIFICATE-----

# I have no clue
zkConfig:
  serverPublic: ABCDEFGHIJKLMNOPQRSTUVWXYZ/0123456789+abcdefghijklmnopqrstuvwxyz
  serverSecret: secret://zkConfig.serverSecret

# I have no clue
genericZkConfig:
  serverSecret: secret://genericZkConfig.serverSecret


# AWS appConfig spot
appConfig:
  application: example
  environment: example
  configuration: example

# I have no clue
remoteConfig:
  authorizedTokens: secret://remoteConfig.authorizedTokens
  authorizedUsers:
    - # 1st authorized user
    - # 2nd authorized user
    - # ...
    - # Nth authorized user
  requiredHostedDomain: example.com
  audiences:
    - # 1st audience
    - # 2nd audience
    - # ...
    - # Nth audience
  globalConfig: # keys and values that are given to clients on GET /v1/config
    EXAMPLE_KEY: VALUE

# Not required
paymentsService:
  userAuthenticationTokenSharedSecret: secret://paymentsService.userAuthenticationTokenSharedSecret
  fixerApiKey: secret://paymentsService.fixerApiKey
  coinMarketCapApiKey: secret://paymentsService.coinMarketCapApiKey
  coinMarketCapCurrencyIds:
    MOB: 7878
  paymentCurrencies:
    # list of symbols for supported currencies
    - MOB

# I have no clue
artService:
  userAuthenticationTokenSharedSecret: secret://artService.userAuthenticationTokenSharedSecret
  userAuthenticationTokenUserIdSecret: secret://artService.userAuthenticationTokenUserIdSecret

# I think you can use Signal's default badges url in Signal-Android
badges:
  badges:
    - id: TEST
      category: other
      sprites: # exactly 6
        - sprite-1.png
        - sprite-2.png
        - sprite-3.png
        - sprite-4.png
        - sprite-5.png
        - sprite-6.png
      svg: example.svg
      svgs:
        - light: example-light.svg
          dark: example-dark.svg
  badgeIdsEnabledForAll:
    - TEST
  receiptLevels:
    '1': TEST

# Optional
subscription: # configuration for Stripe subscriptions
  badgeGracePeriod: P15D
  levels:
    500:
      badge: EXAMPLE
      prices:
        # list of ISO 4217 currency codes and amounts for the given badge level
        xts:
          amount: '10'
          processorIds:
            STRIPE: price_example   # stripe Price ID
            BRAINTREE: plan_example # braintree Plan ID

# Optional
oneTimeDonations:
  boost:
    level: 1
    expiration: P90D
    badge: EXAMPLE
  gift:
    level: 10
    expiration: P90D
    badge: EXAMPLE
  currencies:
    # ISO 4217 currency codes and amounts in those currencies
    xts:
      minimum: '0.5'
      gift: '2'
      boosts:
        - '1'
        - '2'
        - '4'
        - '8'
        - '20'
        - '40'

# I'm not sure but I think it's important
registrationService:
  host: registration.example.com
  port: 443
  credentialConfigurationJson: |
    {
      "example": "example"
    }
  secondaryCredentialConfigurationJson: |
    {
      "example": "example"
    }
  identityTokenAudience: https://registration.example.com
  registrationCaCertificate: | # Registration service TLS certificate trust root
    -----BEGIN CERTIFICATE-----
    ABCDEFGHIJKLMNOPQRSTUVWXYZ/0123456789+abcdefghijklmnopqrstuvwxyz
    ABCDEFGHIJKLMNOPQRSTUVWXYZ/0123456789+abcdefghijklmnopqrstuvwxyz
    ABCDEFGHIJKLMNOPQRSTUVWXYZ/0123456789+abcdefghijklmnopqrstuvwxyz
    ABCDEFGHIJKLMNOPQRSTUVWXYZ/0123456789+abcdefghijklmnopqrstuvwxyz
    ABCDEFGHIJKLMNOPQRSTUVWXYZ/0123456789+abcdefghijklmnopqrstuvwxyz
    ABCDEFGHIJKLMNOPQRSTUVWXYZ/0123456789+abcdefghijklmnopqrstuvwxyz
    ABCDEFGHIJKLMNOPQRSTUVWXYZ/0123456789+abcdefghijklmnopqrstuvwxyz
    ABCDEFGHIJKLMNOPQRSTUVWXYZ/0123456789+abcdefghijklmnopqrstuvwxyz
    ABCDEFGHIJKLMNOPQRSTUVWXYZ/0123456789+abcdefghijklmnopqrstuvwxyz
    ABCDEFGHIJKLMNOPQRSTUVWXYZ/0123456789+abcdefghijklmnopqrstuvwxyz
    ABCDEFGHIJKLMNOPQRSTUVWXYZ/0123456789+abcdefghijklmnopqrstuvwxyz
    ABCDEFGHIJKLMNOPQRSTUVWXYZ/0123456789+abcdefghijklmnopqrstuvwxyz
    ABCDEFGHIJKLMNOPQRSTUVWXYZ/0123456789+abcdefghijklmnopqrstuvwxyz
    ABCDEFGHIJKLMNOPQRSTUVWXYZ/0123456789+abcdefghijklmnopqrstuvwxyz
    ABCDEFGHIJKLMNOPQRSTUVWXYZ/0123456789+abcdefghijklmnopqrstuvwxyz
    ABCDEFGHIJKLMNOPQRSTUVWXYZ/0123456789+abcdefghijklmnopqrstuvwxyz
    ABCDEFGHIJKLMNOPQRSTUVWXYZ/0123456789+abcdefghijklmnopqrstuvwxyz
    ABCDEFGHIJKLMNOPQRSTUVWXYZ/0123456789+abcdefghijklmnopqrstuvwxyz
    AAAAAAAAAAAAAAAAAAAA
    -----END CERTIFICATE-----
